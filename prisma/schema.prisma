// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  firstName   String?
  lastName    String?
  userName    String      @unique
  email       String      @unique
  phoneNumber String?     @unique
  password    String
  snsKey      String? // 인증되면 해시 값으로 ..? 
  userAdress  UserAdress?
  bio         String?
  avatar      String?
  gender      String
  weigth      Int?
  height      Int?
  topSize     String?
  bottomSize  String?
  outerSize   String?
  shoeSize    Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Review      Review[]
  Comment     Comment[]
  Recomment   Recomment[]
  QnA         QnA[]
}

model UserAdress {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique
  content String
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  bid       String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id         String      @id @default(uuid())
  Brand      Brand       @relation(fields: [brandId], references: [id])
  brandId    String
  title      String      @unique @default("")
  caption    String?
  thumbNails Json
  kategories Kategorie[] // outer, top, bottom, shoes, acc ....
  type       Type        @relation(fields: [typeId], references: [id]) // top -> shirts T-shirts knit, mantoman... 
  typeId     String
  stoke      Int
  // 1 to 1 으로 별도 모델을 팔지??   String[]으로 처리하고 싶은데 디비에서 안받아즈나봄?
  sizes      Json // xs s m l xl, 220 230 240 250 ... 타입에 따라..
  specs      Json // 협의 필요... top-xs (총장 품 가슴 둘레 어꺠 등등,,) bottom-xs(총장, 허벅지, 밑위 등등..) 조사 요망      
  colors     Json // {name: String, code: HEXcode} 
  // -------------------------------------------------------------------------------------------------------
  hashtags   HashTag[]
  reviews    Review[]
  starCount  Int         @default(0)
  totalStar  Float       @default(0)
  qnas       QnA[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Comment    Comment[]
}

model Kategorie {
  id        String    @id @default(cuid())
  kategorie String    @unique
  products  Product[]
  types     Type[]
}

model Type {
  id          String     @id @default(cuid())
  ingredient  String     @unique
  products    Product[]
  Kategorie   Kategorie? @relation(fields: [kategorieId], references: [id])
  kategorieId String?
}

model HashTag {
  id        String    @id @default(uuid())
  hashtag   String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Review {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  star      Float     @default(0)
  files     Json
  content   String
  comments  Comment[]
  // Int 1 2 3 값 형식 및 서식 협의 필요
  fit       Int // 1.작아요 2.커요 3.딱 맞아요 
  color     Int // 1. 어두워요 2.밝아요 3.딱 맞아요
  thickness Int // 1.얇아요 2.두꺼워요 3.딱 맞아요
  // ---------------------------------------------
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([productId, userId])
}

model Comment {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  product    Product     @relation(fields: [productId], references: [id])
  productId  String
  content    String
  recomments Recomment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Review     Review?     @relation(fields: [reviewId], references: [id])
  reviewId   Int?
}

model Recomment {
  id        Int      @id @default(autoincrement())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QnA {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  product   Product    @relation(fields: [productId], references: [id])
  productId String
  qnAaType  QnAType    @relation(fields: [qnATypeId], references: [id])
  qnATypeId Int
  content   String
  qnaAnswer QnAAnswer?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model QnAType {
  id   Int    @id @default(autoincrement())
  QnA  QnA[]
  type String
}

model QnAAnswer {
  id      Int    @id @default(autoincrement())
  QnA     QnA    @relation(fields: [qnAId], references: [id])
  qnAId   Int    @unique
  content String
}

// model Seller {

// }

// model Order {

// }
