// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String           @id @default(uuid())
  firstName       String?
  lastName        String?
  userName        String           @unique
  email           String           @unique
  phoneNumber     String?          @unique
  password        String
  snsKey          String? // 인증되면 해시 값으로 ..? 
  userAdress      UserAdress?
  bio             String?
  avatar          String?
  gender          String
  weight          Int?
  height          Int?
  topSize         String?
  bottomSize      String?
  outerSize       String?
  shoeSize        Int?
  orders          Order[]
  cartItems       CartItem[]
  pins            Pin[]
  reviews         Review[]
  comments        Comment[]
  recomments      Recomment[]
  questions       Question[]
  brandFallowings BrandFallowing[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  cartItemId      String?
}

model UserAdress {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  adress String

  @@index([userId])
}

model CartItem {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  productId        String
  productName      String
  proudctPrice     Float
  productThumbNail String
  size             String
  color            String
  quantity         Int      @default(1)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
}

model Pin {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  productId String

  @@index([userId])
}

model BrandFallowing {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  brandId String

  @@index([userId])
}

model Brand {
  id            String    @id @default(uuid())
  name          String
  bid           String
  seller        Seller    @relation(fields: [sellerId], references: [id])
  sellerId      String
  products      Product[]
  fallowerCount Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([sellerId])
}

model Product {
  id          String     @id @default(uuid())
  seller      Seller     @relation(fields: [sellerId], references: [id])
  sellerId    String
  brand       Brand      @relation(fields: [brandId], references: [id])
  brandId     String
  title       String
  caption     String?
  thumbNails  Json
  kategorie   Kategorie  @relation(fields: [kategorieId], references: [id]) // outer, top, bottom, shoes, acc .... 
  kategorieId String
  type        Type       @relation(fields: [typeId], references: [id]) // top -> shirts T-shirts knit, mantoman... 
  typeId      String
  // 1 to 1 으로 별도 모델을 팔지??   String[]으로 처리하고 싶은데 디비에서 안받아즈나봄?
  options     Option[]
  colors      Color[]
  // -------------------------------------------------------------------------------------------------------
  price       Int
  discount    Discount?
  tags        Tag[]
  reviews     Review[]
  ratingCount Int        @default(0)
  totalRating Float      @default(0)
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([sellerId])
  @@index([brandId])
  @@index([kategorieId])
  @@index([typeId])
}

model Kategorie {
  id        String     @id @default(uuid())
  kategorie String     @unique
  products  Product[]
  types     Type[]
  // for test
  TProduct  TProduct[]
}

model Type {
  id          String     @id @default(uuid())
  type        String     @unique
  products    Product[]
  Kategorie   Kategorie? @relation(fields: [kategorieId], references: [id])
  kategorieId String?
  // for test
  TProduct    TProduct[]

  @@index([kategorieId])
}

model Option {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  option    String
  quantity  Int
  spec      Json?

  @@index([productId])
}

model Color {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  name      String
  colorCode String

  @@index([productId])
}

model Discount {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique
  able      Boolean
  percent   Int

  @@index([productId])
}

model Tag {
  id         String    @id @default(uuid())
  tagContext String    @unique
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Review {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  product         Product   @relation(fields: [productId], references: [id])
  productId       String
  order           Order     @relation(fields: [orderId], references: [id])
  orderId         String    @unique
  rating          Float     @default(0)
  files           Json?
  content         String
  comments        Comment[]
  // Int 1 2 3 값 형식 및 서식 협의 필요
  fitRating       Int // 1.작아요 2.커요 3.딱 맞아요 
  colorRating     Int // 1. 어두워요 2.밝아요 3.딱 맞아요
  thicknessRating Int // 1.얇아요 2.두꺼워요 3.딱 맞아요
  // ---------------------------------------------
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([productId, userId])
  @@index([userId])
  @@index([productId])
}

model Comment {
  id         String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  review     Review      @relation(fields: [reviewId], references: [id])
  reviewId   String
  content    String
  recomments Recomment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userId])
  @@index([reviewId])
}

model Recomment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([commentId])
}

model Question {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  qnAType   String
  content   String
  answer    Answer?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Answer {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @unique
  Seller     Seller   @relation(fields: [sellerId], references: [id])
  sellerId   String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([questionId])
  @@index([sellerId])
}

model Order {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  seller    Seller   @relation(fields: [sellerId], references: [id])
  sellerId  String
  productId String
  orderCode String   @unique
  size      String
  color     String
  quantity  Int      @default(1)
  adress    String?
  progress  String // "order-check" | "oder-done" | "order-fail" | "delivery" | "delivery-complete" | "delivery-fail" | "receipt-confirmed" | "cancel" | "cancel-fail" | "return" | "return-check" |  "return-done" | "return-fail" | "exchange" | "exchange-check" |  "exchange-done" | "exchange-fail"
  review    Review?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([sellerId])
}

model Seller {
  id         String    @id @default(uuid())
  sellerName String
  products   Product[]
  brands     Brand[]
  orders     Order[]
  qnAAnswers Answer[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// ------------------------------------------------------------ //
// for test

model TProduct {
  id          String     @id @default(uuid())
  name        String
  thumbNails  Json
  kategorie   Kategorie? @relation(fields: [kategorieId], references: [id])
  kategorieId String?
  type        Type?      @relation(fields: [typeId], references: [id])
  typeId      String?
  content     String
  price       Int
  createdAt   DateTime   @default(now())

  @@index([kategorieId])
  @@index([typeId])
}
